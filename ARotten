class Solution {
    int count =0;
    public int orangesRotting(int[][] grid) {
        int fresh = 0, rotten =0;
        Queue<int[]>q= new LinkedList<>();
        for(int i=0; i<grid.length; i++){
            for(int j=0; j<grid[0].length; j++){
                if(grid[i][j]==2){
                    q.offer(new int[]{i,j});
                }
                else if(grid[i][j]==1){
                    fresh++;
                }
            }
        }
        
        if (fresh==0)return 0;
        int time =0;
        int[][] dire = {{1,0},{-1,0},{0,1},{0,-1}};
        while(!q.isEmpty()){
            time++;
            int size = q.size();
            for(int i=0; i<size; i++){
            int[] point = q.poll();
                
            for(int[] d:dire){
                int x = point[0]+d[0];
                int y = point[1]+d[1];
                if(x<0 || y<0 || x>=grid.length || y>=grid[0].length || grid[x][y]==0 || grid[x][y]==2)
                    continue;
                
                grid[x][y]=2;
                fresh--;
                q.offer(new int[]{x,y});
                }
            }
        }
        return fresh==0?time-1:-1;
    }
    
}
