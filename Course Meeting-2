class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        Map<Integer, List<Integer>>hm = new HashMap<>();
        //Creating keys
        for(int i=0; i<numCourses; i++){
            hm.put(i, new ArrayList<>());
        }
        //updating the hashmap by adding all the prequisites to complete the  particluar course
        for(int i=0; i<prerequisites.length; i++){
            hm.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        //LinkedHashSet to maintain the order and to avoid duplicates of the order
        Set<Integer>set = new LinkedHashSet<>();
        //Courses which doesn't require any prerequisites are added
        for(int i=0; i<numCourses; i++){
            if(!hm.containsKey(i)){
                set.add(i);
            }
        }
        
        //Brute force to travese through each element
        for(int i=0; i<numCourses; i++){
            for(Map.Entry<Integer, List<Integer>>map: hm.entrySet()){
                List<Integer> temp = map.getValue();
                int size = 0;
                for(int j =0; j<temp.size(); j++){
                    if(set.contains(temp.get(j))){
                        size++;
                    }
                }
                if(size==temp.size()){
                    set.add(map.getKey());
                }
                
            }
        }
        int[] a = new int[set.size()];
        int x =0;
        for(int i:set){
            a[x]=i;
            x++;
        }
        int[] arr = new int[0];
        return set.size()==numCourses? a: arr;
    }
}
