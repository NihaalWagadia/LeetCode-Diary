/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
 /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    String strS ="", strT="";
    public boolean isSubtree(TreeNode s, TreeNode t) {
        
        strS = inorder(s, strS);
        strT = inorder(t, strT);
        return strS.contains(strT)?true:false;
    }
    
    public String inorder(TreeNode root, String str){
      
        if(root==null){
            str = str+"#";
        }
        else{
            str = str+","+root.val;
            str = inorder(root.left, str);
            str = inorder(root.right, str);
        }
        return str;
    }

}
 
 
 
 
 
 
 
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
        String stringS = preorder(s);
        String stringT = preorder(t);
        System.out.println(stringS);
        System.out.println(stringT);
        return stringS.contains(stringT)?true:false;
    }
    
    public String preorder(TreeNode s){
        Stack<TreeNode> st = new Stack<>();
        StringBuilder sb = new StringBuilder();
        st.push(s);
        while(!st.isEmpty()){
         TreeNode no = st.pop();
            if(no==null)
            {
                sb.append("#,");
            }
            else if(no!=null){
                sb.append(","+no.val);
            }
            if(no!=null){
                st.push(no.right);
                st.push(no.left);
            }
            
                //System.out.println(value);
        }
        return sb.toString();
        
    }
}


