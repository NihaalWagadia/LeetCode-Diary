class LRUCache {

    int cap = 0;
    Map<Integer, Integer>hm = new LinkedHashMap<>();
    public LRUCache(int capacity) {
        cap = capacity;
    }
    
    public int get(int key) {
        if(!hm.containsKey(key))return -1;
        int val = hm.get(key);
        hm.remove(key);
        hm.put(key,val);
        return hm.get(key);
    }
    
    public void put(int key, int value) {
        if(hm.containsKey(key)){
            hm.remove(key);
            hm.put(key, value);
        }
        else if(hm.size()==cap){
        for(Map.Entry<Integer, Integer>map:hm.entrySet()){
            int k = map.getKey();
            hm.remove(k);
            break;
        }
            hm.put(key,value);
    
        }
        else{
            hm.put(key,value);
        }
        
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
