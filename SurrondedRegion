class Solution {
    public void solve(char[][] board) {
        if(board.length==0||board[0].length==0)return;
        int top_col=0;
        while(top_col<board[0].length){
            if(board[0][top_col]=='O'){
                rec(board, 0, top_col);
            }
            top_col++;
        }
        int left_row=0;
        while(left_row<board.length){
              if(board[left_row][0]=='O'){
                rec(board, left_row, 0);
            }
            left_row++;
        }
        int bottom_col = 0;
         while(bottom_col<board[0].length){
               if(board[board.length-1][bottom_col]=='O'){
                rec(board, board.length-1, bottom_col);
            }
            bottom_col++;
        }
        int right_row =0;
        while(right_row<board.length){
             if(board[right_row][board[0].length-1]=='O'){
                rec(board, right_row, board[0].length-1);
            }
            right_row++;
        }
        for(int i=0; i<board.length; i++){
            for(int j=0; j<board[0].length; j++){
                if(board[i][j]=='C'){
                    board[i][j]='O';
                }
                else if(board[i][j]=='O'){
                    board[i][j]='X';
                }
            }
        }
        
    }
    
    
    public void rec(char[][]board, int i, int j){
        if(i<0|| j<0|| i>=board.length || j>= board[0].length || board[i][j]=='X' ||board[i][j]=='C'){
            return;
        }
        board[i][j]='C';
        rec(board, i+1, j);
        rec(board, i, j+1);
        rec(board, i-1, j);
        rec(board, i, j-1);
    }
}
